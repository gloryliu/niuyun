package com.niuyunzhipin.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.niuyun.hire.ui.bean.City;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CITY".
*/
public class CityDao extends AbstractDao<City, Long> {

    public static final String TABLENAME = "CITY";

    /**
     * Properties of entity City.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property CityId = new Property(1, String.class, "cityId", false, "CITY_ID");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property ShortPy = new Property(3, String.class, "shortPy", false, "SHORT_PY");
        public final static Property ProvinceId = new Property(4, String.class, "provinceId", false, "PROVINCE_ID");
        public final static Property ProvinceName = new Property(5, String.class, "provinceName", false, "PROVINCE_NAME");
        public final static Property Enabled = new Property(6, String.class, "enabled", false, "ENABLED");
        public final static Property IsHot = new Property(7, String.class, "isHot", false, "IS_HOT");
    }


    public CityDao(DaoConfig config) {
        super(config);
    }
    
    public CityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: id
                "\"CITY_ID\" TEXT," + // 1: cityId
                "\"NAME\" TEXT," + // 2: name
                "\"SHORT_PY\" TEXT," + // 3: shortPy
                "\"PROVINCE_ID\" TEXT," + // 4: provinceId
                "\"PROVINCE_NAME\" TEXT," + // 5: provinceName
                "\"ENABLED\" TEXT," + // 6: enabled
                "\"IS_HOT\" TEXT);"); // 7: isHot
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, City entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String cityId = entity.getCityId();
        if (cityId != null) {
            stmt.bindString(2, cityId);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String shortPy = entity.getShortPy();
        if (shortPy != null) {
            stmt.bindString(4, shortPy);
        }
 
        String provinceId = entity.getProvinceId();
        if (provinceId != null) {
            stmt.bindString(5, provinceId);
        }
 
        String provinceName = entity.getProvinceName();
        if (provinceName != null) {
            stmt.bindString(6, provinceName);
        }
 
        String enabled = entity.getEnabled();
        if (enabled != null) {
            stmt.bindString(7, enabled);
        }
 
        String isHot = entity.getIsHot();
        if (isHot != null) {
            stmt.bindString(8, isHot);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, City entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String cityId = entity.getCityId();
        if (cityId != null) {
            stmt.bindString(2, cityId);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String shortPy = entity.getShortPy();
        if (shortPy != null) {
            stmt.bindString(4, shortPy);
        }
 
        String provinceId = entity.getProvinceId();
        if (provinceId != null) {
            stmt.bindString(5, provinceId);
        }
 
        String provinceName = entity.getProvinceName();
        if (provinceName != null) {
            stmt.bindString(6, provinceName);
        }
 
        String enabled = entity.getEnabled();
        if (enabled != null) {
            stmt.bindString(7, enabled);
        }
 
        String isHot = entity.getIsHot();
        if (isHot != null) {
            stmt.bindString(8, isHot);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public City readEntity(Cursor cursor, int offset) {
        City entity = new City( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // cityId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // shortPy
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // provinceId
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // provinceName
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // enabled
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // isHot
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, City entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setCityId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setShortPy(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setProvinceId(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setProvinceName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setEnabled(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setIsHot(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(City entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(City entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(City entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
