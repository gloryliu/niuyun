package com.niuyunzhipin.greendao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.niuyun.hire.ui.bean.DataBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DATA_BEAN".
*/
public class DataBeanDao extends AbstractDao<DataBean, Long> {

    public static final String TABLENAME = "DATA_BEAN";

    /**
     * Properties of entity DataBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Galias = new Property(1, String.class, "galias", false, "GALIAS");
        public final static Property Gname = new Property(2, String.class, "gname", false, "GNAME");
        public final static Property Gid = new Property(3, long.class, "gid", false, "GID");
        public final static Property Gsys = new Property(4, int.class, "gsys", false, "GSYS");
    }

    private Query<DataBean> allTagBean_DataQuery;

    public DataBeanDao(DaoConfig config) {
        super(config);
    }
    
    public DataBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DATA_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"GALIAS\" TEXT," + // 1: galias
                "\"GNAME\" TEXT," + // 2: gname
                "\"GID\" INTEGER NOT NULL ," + // 3: gid
                "\"GSYS\" INTEGER NOT NULL );"); // 4: gsys
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DATA_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DataBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String galias = entity.getGalias();
        if (galias != null) {
            stmt.bindString(2, galias);
        }
 
        String gname = entity.getGname();
        if (gname != null) {
            stmt.bindString(3, gname);
        }
        stmt.bindLong(4, entity.getGid());
        stmt.bindLong(5, entity.getGsys());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DataBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String galias = entity.getGalias();
        if (galias != null) {
            stmt.bindString(2, galias);
        }
 
        String gname = entity.getGname();
        if (gname != null) {
            stmt.bindString(3, gname);
        }
        stmt.bindLong(4, entity.getGid());
        stmt.bindLong(5, entity.getGsys());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DataBean readEntity(Cursor cursor, int offset) {
        DataBean entity = new DataBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // galias
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // gname
            cursor.getLong(offset + 3), // gid
            cursor.getInt(offset + 4) // gsys
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DataBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setGalias(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setGname(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setGid(cursor.getLong(offset + 3));
        entity.setGsys(cursor.getInt(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DataBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DataBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DataBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "data" to-many relationship of AllTagBean. */
    public List<DataBean> _queryAllTagBean_Data(long gid) {
        synchronized (this) {
            if (allTagBean_DataQuery == null) {
                QueryBuilder<DataBean> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Gid.eq(null));
                allTagBean_DataQuery = queryBuilder.build();
            }
        }
        Query<DataBean> query = allTagBean_DataQuery.forCurrentThread();
        query.setParameter(0, gid);
        return query.list();
    }

}
